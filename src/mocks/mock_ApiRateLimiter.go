// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockApiRateLimiter is an autogenerated mock type for the ApiRateLimiter type
type MockApiRateLimiter struct {
	mock.Mock
}

type MockApiRateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApiRateLimiter) EXPECT() *MockApiRateLimiter_Expecter {
	return &MockApiRateLimiter_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields:
func (_m *MockApiRateLimiter) Allow() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockApiRateLimiter_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockApiRateLimiter_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
func (_e *MockApiRateLimiter_Expecter) Allow() *MockApiRateLimiter_Allow_Call {
	return &MockApiRateLimiter_Allow_Call{Call: _e.mock.On("Allow")}
}

func (_c *MockApiRateLimiter_Allow_Call) Run(run func()) *MockApiRateLimiter_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApiRateLimiter_Allow_Call) Return(_a0 bool) *MockApiRateLimiter_Allow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApiRateLimiter_Allow_Call) RunAndReturn(run func() bool) *MockApiRateLimiter_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// MarkLimited provides a mock function with given fields:
func (_m *MockApiRateLimiter) MarkLimited() {
	_m.Called()
}

// MockApiRateLimiter_MarkLimited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkLimited'
type MockApiRateLimiter_MarkLimited_Call struct {
	*mock.Call
}

// MarkLimited is a helper method to define mock.On call
func (_e *MockApiRateLimiter_Expecter) MarkLimited() *MockApiRateLimiter_MarkLimited_Call {
	return &MockApiRateLimiter_MarkLimited_Call{Call: _e.mock.On("MarkLimited")}
}

func (_c *MockApiRateLimiter_MarkLimited_Call) Run(run func()) *MockApiRateLimiter_MarkLimited_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApiRateLimiter_MarkLimited_Call) Return() *MockApiRateLimiter_MarkLimited_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApiRateLimiter_MarkLimited_Call) RunAndReturn(run func()) *MockApiRateLimiter_MarkLimited_Call {
	_c.Call.Return(run)
	return _c
}

// SetAvailableTime provides a mock function with given fields: timestamp
func (_m *MockApiRateLimiter) SetAvailableTime(timestamp int64) {
	_m.Called(timestamp)
}

// MockApiRateLimiter_SetAvailableTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAvailableTime'
type MockApiRateLimiter_SetAvailableTime_Call struct {
	*mock.Call
}

// SetAvailableTime is a helper method to define mock.On call
//   - timestamp int64
func (_e *MockApiRateLimiter_Expecter) SetAvailableTime(timestamp interface{}) *MockApiRateLimiter_SetAvailableTime_Call {
	return &MockApiRateLimiter_SetAvailableTime_Call{Call: _e.mock.On("SetAvailableTime", timestamp)}
}

func (_c *MockApiRateLimiter_SetAvailableTime_Call) Run(run func(timestamp int64)) *MockApiRateLimiter_SetAvailableTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockApiRateLimiter_SetAvailableTime_Call) Return() *MockApiRateLimiter_SetAvailableTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApiRateLimiter_SetAvailableTime_Call) RunAndReturn(run func(int64)) *MockApiRateLimiter_SetAvailableTime_Call {
	_c.Call.Return(run)
	return _c
}

// WaitTime provides a mock function with given fields:
func (_m *MockApiRateLimiter) WaitTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WaitTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockApiRateLimiter_WaitTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitTime'
type MockApiRateLimiter_WaitTime_Call struct {
	*mock.Call
}

// WaitTime is a helper method to define mock.On call
func (_e *MockApiRateLimiter_Expecter) WaitTime() *MockApiRateLimiter_WaitTime_Call {
	return &MockApiRateLimiter_WaitTime_Call{Call: _e.mock.On("WaitTime")}
}

func (_c *MockApiRateLimiter_WaitTime_Call) Run(run func()) *MockApiRateLimiter_WaitTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApiRateLimiter_WaitTime_Call) Return(_a0 time.Duration) *MockApiRateLimiter_WaitTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApiRateLimiter_WaitTime_Call) RunAndReturn(run func() time.Duration) *MockApiRateLimiter_WaitTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApiRateLimiter creates a new instance of MockApiRateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApiRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApiRateLimiter {
	mock := &MockApiRateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
